// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: skills.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewSkill = `-- name: CreateNewSkill :one
INSERT INTO skills (id, damage, reach, coin, amount_to_pay, name, description, role) 
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7
)
RETURNING id, coin, amount_to_pay, damage, role, reach, name, description
`

type CreateNewSkillParams struct {
	Damage      int32
	Reach       int32
	Coin        string
	AmountToPay int32
	Name        string
	Description string
	Role        int32
}

func (q *Queries) CreateNewSkill(ctx context.Context, arg CreateNewSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createNewSkill,
		arg.Damage,
		arg.Reach,
		arg.Coin,
		arg.AmountToPay,
		arg.Name,
		arg.Description,
		arg.Role,
	)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Coin,
		&i.AmountToPay,
		&i.Damage,
		&i.Role,
		&i.Reach,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const deleteAllSkills = `-- name: DeleteAllSkills :exec
DELETE FROM skills
`

func (q *Queries) DeleteAllSkills(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSkills)
	return err
}

const deleteOneSkill = `-- name: DeleteOneSkill :exec
DELETE FROM skills WHERE id = $1
`

func (q *Queries) DeleteOneSkill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOneSkill, id)
	return err
}

const getSkill = `-- name: GetSkill :one
SELECT id, coin, amount_to_pay, damage, role, reach, name, description FROM skills WHERE id = $1
`

func (q *Queries) GetSkill(ctx context.Context, id uuid.UUID) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Coin,
		&i.AmountToPay,
		&i.Damage,
		&i.Role,
		&i.Reach,
		&i.Name,
		&i.Description,
	)
	return i, err
}
