// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: characters.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const assignSkill = `-- name: AssignSkill :exec
UPDATE characters SET skill_id = $1 WHERE characters.id = $2
`

type AssignSkillParams struct {
	SkillID uuid.NullUUID
	ID      uuid.UUID
}

func (q *Queries) AssignSkill(ctx context.Context, arg AssignSkillParams) error {
	_, err := q.db.ExecContext(ctx, assignSkill, arg.SkillID, arg.ID)
	return err
}

const assignWeapon = `-- name: AssignWeapon :exec
UPDATE characters SET weapon_id = $1 WHERE characters.id = $2
`

type AssignWeaponParams struct {
	WeaponID uuid.NullUUID
	ID       uuid.UUID
}

func (q *Queries) AssignWeapon(ctx context.Context, arg AssignWeaponParams) error {
	_, err := q.db.ExecContext(ctx, assignWeapon, arg.WeaponID, arg.ID)
	return err
}

const createNewCharacter = `-- name: CreateNewCharacter :one
INSERT INTO characters (id, health, mana, stamina, strength, job, name, skill_id, weapon_id, icon) 
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9
)
RETURNING id, health, mana, stamina, strength, job, name, skill_id, weapon_id, icon
`

type CreateNewCharacterParams struct {
	Health   int32
	Mana     int32
	Stamina  int32
	Strength int32
	Job      int32
	Name     string
	SkillID  uuid.NullUUID
	WeaponID uuid.NullUUID
	Icon     string
}

func (q *Queries) CreateNewCharacter(ctx context.Context, arg CreateNewCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createNewCharacter,
		arg.Health,
		arg.Mana,
		arg.Stamina,
		arg.Strength,
		arg.Job,
		arg.Name,
		arg.SkillID,
		arg.WeaponID,
		arg.Icon,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Health,
		&i.Mana,
		&i.Stamina,
		&i.Strength,
		&i.Job,
		&i.Name,
		&i.SkillID,
		&i.WeaponID,
		&i.Icon,
	)
	return i, err
}

const deleteAllCharacters = `-- name: DeleteAllCharacters :exec
DELETE FROM characters
`

func (q *Queries) DeleteAllCharacters(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCharacters)
	return err
}

const deleteOneCharacter = `-- name: DeleteOneCharacter :exec
DELETE FROM characters WHERE id = $1
`

func (q *Queries) DeleteOneCharacter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOneCharacter, id)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, health, mana, stamina, strength, job, name, skill_id, weapon_id, icon FROM CHARACTERS WHERE id = $1
`

func (q *Queries) GetCharacter(ctx context.Context, id uuid.UUID) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Health,
		&i.Mana,
		&i.Stamina,
		&i.Strength,
		&i.Job,
		&i.Name,
		&i.SkillID,
		&i.WeaponID,
		&i.Icon,
	)
	return i, err
}
