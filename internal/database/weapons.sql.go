// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weapons.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewWeapon = `-- name: CreateNewWeapon :one
INSERT INTO weapons (id, damage, reach, name, description, role) 
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	$4,
	$5
)
RETURNING id, name, description, damage, reach, role
`

type CreateNewWeaponParams struct {
	Damage      int32
	Reach       int32
	Name        string
	Description string
	Role        int32
}

func (q *Queries) CreateNewWeapon(ctx context.Context, arg CreateNewWeaponParams) (Weapon, error) {
	row := q.db.QueryRowContext(ctx, createNewWeapon,
		arg.Damage,
		arg.Reach,
		arg.Name,
		arg.Description,
		arg.Role,
	)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Damage,
		&i.Reach,
		&i.Role,
	)
	return i, err
}

const deleteAllWeapons = `-- name: DeleteAllWeapons :exec
DELETE FROM weapons
`

func (q *Queries) DeleteAllWeapons(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllWeapons)
	return err
}

const deleteOneWeapon = `-- name: DeleteOneWeapon :exec
DELETE FROM weapons WHERE id = $1
`

func (q *Queries) DeleteOneWeapon(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOneWeapon, id)
	return err
}

const getWeapon = `-- name: GetWeapon :one
SELECT id, name, description, damage, reach, role FROM weapons WHERE id = $1
`

func (q *Queries) GetWeapon(ctx context.Context, id uuid.UUID) (Weapon, error) {
	row := q.db.QueryRowContext(ctx, getWeapon, id)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Damage,
		&i.Reach,
		&i.Role,
	)
	return i, err
}
